C51 COMPILER V9.52.0.0   ADC_KEY                                                           07/24/2018 11:06:11 PAGE 1   


C51 COMPILER V9.52.0.0, COMPILATION OF MODULE ADC_KEY
OBJECT MODULE PLACED IN .\Output\adc_key.obj
COMPILER INVOKED BY: E:\Keil\C51\BIN\C51.EXE User\adc_key.c LARGE ROM(COMPACT) BROWSE INCDIR(.\includes;.\User;.\Library
                    -\Includes;.\TS_Lib\Includes) DEBUG OBJECTEXTEND PRINT(.\Lis\adc_key.lst) TABS(2) OBJECT(.\Output\adc_key.obj)

line level    source

   1          #ifndef _ADC_KEY_C_
   2          #define _ADC_KEY_C_
   3          
   4          
   5          #include "ca51f_config.h"
   6          #if (IC_TYPE == IC_TYPE_CA51F2X)
              #include "../../includes/ca51f2sfr.h"
              #include "../../includes/ca51f2xsfr.h"
              #include "../../includes/gpiodef_f2.h"
              #elif (IC_TYPE == IC_TYPE_CA51F3X)
  11          #include "../../includes/ca51f3sfr.h"
  12          #include "../../includes/ca51f3xsfr.h"
  13          #include "../../includes/gpiodef_f3.h"
  14          #endif
  15          #include "../../includes/system.h"
  16          #include "../../Library/includes/delay.h"
  17          #include "../../Library/includes/adc.h"
  18          #include <intrins.h>
  19          
  20          #include "app_config.h"
  21          #include "adc_key.h"
  22          
  23          
  24          #define    ADC_KEY_JITTER_TIME    5    //3*10ms
  25          #define    ADC_KEY_CP_TIME    150    //100*10ms
  26          #define    ADC_KEY_CPH_TIME    30
  27          
  28          
  29          #define    ADC_VALUE_K1    0x10
  30          #define    ADC_VALUE_K2    0x21
  31          #define    ADC_VALUE_K3    0x61
  32          #define    ADC_VALUE_K4    0x87
  33          
  34          #define    DEBOUNCE    7 
  35          
  36          uint16_t xdata ADC_KEY_JUDGE_TIME;
  37          
  38          static const uint8_t AdcKeyEvent[][5] =
  39          {//PDS(按键开始)  SPR(短按松开)  CPS(长按开始)  CPH(长按保持)  CPR(长按松开)
  40          //  {MSG_NONE,    MSG_MODE,    MSG_SET_TIME,    MSG_NONE,    MSG_NONE},  //K1 -- MODE
  41          //  {MSG_NONE,    MSG_PRE,     MSG_VOL_DW,    MSG_VOL_DW,    MSG_NONE},  //K2 -- V-
  42          //  {MSG_NONE,    MSG_NEXT,    MSG_VOL_UP,    MSG_VOL_UP,    MSG_NONE},  //K3 -- V+
  43          //  {MSG_NONE,    MSG_PLAY_PAUSE,    MSG_SET_CLOCK,    MSG_NONE,    MSG_NONE},  //K4 -- MFD
  44            {MSG_NONE,  MSG_MODE_SHORT,  MSG_MODE_LONG,  MSG_MODE_HOLD,  MSG_NONE},  //K1 -- MODE
  45            {MSG_NONE,  MSG_VOL_DOWN_SHORT,  MSG_VOL_DOWN_LONG,  MSG_VOL_DOWN_HOLD,  MSG_NONE},  //K2 -- V-
  46            {MSG_NONE,  MSG_VOL_UP_SHORT,  MSG_VOL_UP_LONG,  MSG_VOL_UP_HOLD,  MSG_NONE},  //K3 -- V+
  47            {MSG_NONE,  MSG_MFD_SHORT,  MSG_MFD_LONG,  MSG_MFD_HOLD,  MSG_NONE},  //K4 -- MFD
  48          };
  49          
  50          
  51          static uint8_t Get_Adc_Value(void)
  52          {
  53   1        uint16_t xdata adc_value = 0;
  54   1        uint8_t xdata n;
C51 COMPILER V9.52.0.0   ADC_KEY                                                           07/24/2018 11:06:11 PAGE 2   

  55   1        uint8_t xdata max_value =0;
  56   1        uint8_t xdata min_value =255;
  57   1        
  58   1        for(n = 0; n < 18; n++)
  59   1        {
  60   2          ADC_StartConversion();
  61   2          while(!(ADCON & ADIF));   //等待转换完成
  62   2          ADCON |= ADIF;            //清除中断标志位
  63   2          
  64   2          if(max_value < ADCDH)
  65   2          {
  66   3            max_value = ADCDH;
  67   3          }
  68   2          
  69   2          if(min_value > ADCDH)
  70   2          {
  71   3            min_value = ADCDH;
  72   3          }
  73   2          adc_value += ADCDH;
  74   2        }
  75   1        
  76   1        adc_value = adc_value - (max_value + min_value);
  77   1        adc_value >>= 4; 
  78   1        return (uint8_t)adc_value;
  79   1      }
  80          
  81          
  82          static uint8_t Get_Adc_Key_Index(void)
  83          {
  84   1        uint8_t xdata value;
  85   1      //  uint8_t KeyIndex = 0xff;
  86   1        
  87   1        value = Get_Adc_Value();
  88   1      //  Uart0_PutChar(value);
  89   1        
  90   1        if((ADC_VALUE_K1 + DEBOUNCE) >= value)
  91   1        {
  92   2          return ADC_KEY_1;  //按键1
  93   2        }
  94   1        else if((value >= (ADC_VALUE_K2 - DEBOUNCE)) && ((ADC_VALUE_K2 + DEBOUNCE) >= value)) 
  95   1        {
  96   2          return ADC_KEY_2;  //按键2
  97   2        }
  98   1        else if((value >= (ADC_VALUE_K3 - DEBOUNCE)) && ((ADC_VALUE_K3 + DEBOUNCE) >= value)) 
  99   1        {
 100   2          return ADC_KEY_3;  //按键3
 101   2        }
 102   1        else if((value >= (ADC_VALUE_K4 - DEBOUNCE)) && ((ADC_VALUE_K4 + DEBOUNCE) >= value)) 
 103   1        {
 104   2          return ADC_KEY_4;  //按键4
 105   2        }
 106   1        else
 107   1        {
 108   2          return ADC_KEY_ERROR;  //没按键
 109   2        } 
 110   1      }
 111          
 112          
 113          uint8_t Adc_Key_Sacn(void)
 114          {
 115   1        static uint8_t xdata PreKeyIndex = ADC_KEY_ERROR;
 116   1        static uint8_t xdata AdcKeyState = ADC_KEY_STATE_IDLE;
C51 COMPILER V9.52.0.0   ADC_KEY                                                           07/24/2018 11:06:11 PAGE 3   

 117   1        uint8_t xdata KeyIndex;
 118   1        
 119   1        ADC_ConfigChannel(ADC_CH3);
 120   1        Delay_50us(10);
 121   1      
 122   1        KeyIndex = Get_Adc_Key_Index();   
 123   1      //  Uart0_PutChar(KeyIndex);
 124   1        
 125   1        switch(AdcKeyState)
 126   1        {
 127   2          case ADC_KEY_STATE_IDLE:
 128   2              PreKeyIndex = KeyIndex;
 129   2              if(KeyIndex != ADC_KEY_ERROR)
 130   2              {
 131   3                ADC_KEY_JUDGE_TIME = ADC_KEY_JITTER_TIME;
 132   3                AdcKeyState = ADC_KEY_STATE_JITTER;
 133   3              }
 134   2            break;
 135   2              
 136   2          case ADC_KEY_STATE_JITTER:
 137   2            if(PreKeyIndex != KeyIndex)
 138   2            {//抖动，按键无效
 139   3              AdcKeyState = ADC_KEY_STATE_IDLE;
 140   3            }
 141   2            else
 142   2            {//按键有效
 143   3              if(ADC_KEY_JUDGE_TIME > 0)
 144   3              {
 145   4                return MSG_NONE;
 146   4              }
 147   3              ADC_KEY_JUDGE_TIME = ADC_KEY_CP_TIME;
 148   3              AdcKeyState = ADC_KEY_STATE_PRESS_DOWN;
 149   3              return AdcKeyEvent[PreKeyIndex][0];
 150   3            }         
 151   2            break;
 152   2              
 153   2          case ADC_KEY_STATE_PRESS_DOWN:
 154   2            if(PreKeyIndex != KeyIndex)
 155   2            {//短按松开
 156   3              AdcKeyState = ADC_KEY_STATE_IDLE;
 157   3              return AdcKeyEvent[PreKeyIndex][1];
 158   3            }
 159   2            else
 160   2            {//长按开始
 161   3              if(ADC_KEY_JUDGE_TIME > 0)
 162   3              {
 163   4                return MSG_NONE;
 164   4              }
 165   3              ADC_KEY_JUDGE_TIME = ADC_KEY_CPH_TIME;
 166   3              AdcKeyState = ADC_KEY_STATE_CP;
 167   3              return AdcKeyEvent[PreKeyIndex][2];   
 168   3            }
 169   2            break;
 170   2              
 171   2          case ADC_KEY_STATE_CP:      //长按保持
 172   2            if(PreKeyIndex != KeyIndex)
 173   2            {//长按松开
 174   3              AdcKeyState = ADC_KEY_STATE_IDLE;
 175   3              return AdcKeyEvent[PreKeyIndex][4];
 176   3            }
 177   2            else
 178   2            {//长按保持
C51 COMPILER V9.52.0.0   ADC_KEY                                                           07/24/2018 11:06:11 PAGE 4   

 179   3              if(ADC_KEY_JUDGE_TIME > 0)
 180   3              {
 181   4                return MSG_NONE;
 182   4              }
 183   3              ADC_KEY_JUDGE_TIME = ADC_KEY_CPH_TIME;
 184   3              return AdcKeyEvent[PreKeyIndex][3];
 185   3            }
 186   2            break;
 187   2              
 188   2          default:
 189   2            AdcKeyState = ADC_KEY_STATE_IDLE;
 190   2            break;    
 191   2      
 192   2        }
 193   1        
 194   1        return MSG_NONE;
 195   1      }
 196          
 197          
 198          
 199          
 200          
 201          
 202          
 203          #endif
 204          
 205          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    468    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =     24       5
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
