C51 COMPILER V9.52.0.0   MAIN                                                              07/24/2018 11:06:11 PAGE 1   


C51 COMPILER V9.52.0.0, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN .\Output\main.obj
COMPILER INVOKED BY: E:\Keil\C51\BIN\C51.EXE User\main.c LARGE ROM(COMPACT) BROWSE INCDIR(.\includes;.\User;.\Library\In
                    -cludes;.\TS_Lib\Includes) DEBUG OBJECTEXTEND PRINT(.\Lis\main.lst) TABS(2) OBJECT(.\Output\main.obj)

line level    source

   1          #ifndef _MAIN_C_
   2          #define _MAIN_C_
   3          
   4          #include "ca51f_config.h"
   5          #if (IC_TYPE == IC_TYPE_CA51F2X)
              #include "ca51f2sfr.h"
              #include "ca51f2xsfr.h"
              #include "gpiodef_f2.h"
              #elif (IC_TYPE == IC_TYPE_CA51F3X)
  10          #include "ca51f3sfr.h"
  11          #include "ca51f3xsfr.h"
  12          #include "gpiodef_f3.h"
  13          #endif
  14          
  15          
  16          
  17          #include <intrins.h>
  18          #include "app_config.h"
  19          #include "app_task.h"
  20          
  21          
  22          uint8_t xdata Power_Det_State;
  23          uint8_t POWER_STATE;
  24          /***
  25          void PWM3_init(void)
  26          {
  27            P34F=6;
  28            INDEX=PWM_CH3;
  29            PWMCON=TIE(0)|ZIE(0)|PIE(0)|NIE(0)|MS(0)|CKS_IH;
  30            PWMCFG=TOG(1)|0;
  31            PWMDIVH=0;
  32            PWMDIVL=123;
  33            PWMDUTH=0;
  34            PWMDUTL=37;
  35            PWMUPD |= (1<<PWM_CH3);
  36            while(PWMUPD);
  37            PWMEN |= (1<<PWM_CH3);
  38          }
  39          **/
  40          
  41          void main(void)
  42          {
  43   1        Sys_Clk_Set_IRCH();  //ÏµÍ³Ê±ÖÓÎªIRCH
  44   1      //  Sys_Clk_Set_XOSCL();
  45   1        //´ò¿ªXOSCL
  46   1      #if (IC_TYPE == IC_TYPE_CA51F3X)
  47   1        GPIO_Init(P32F,P32_XOSCL_IN_SETTING);
  48   1        GPIO_Init(P33F,P33_XOSCL_OUT_SETTING);
  49   1      #elif  (IC_TYPE == IC_TYPE_CA51F2X)
                GPIO_Init(P71F,P71_XOSCL_OUT_SETTING);
                GPIO_Init(P72F,P72_XOSCL_IN_SETTING);
              #endif
  53   1        CKCON |= XLCKE;
  54   1        while(!(CKCON & XLSTA));    //µÈ´ýÊ±ÖÓÎÈ¶¨
C51 COMPILER V9.52.0.0   MAIN                                                              07/24/2018 11:06:11 PAGE 2   

  55   1        
  56   1        I2CCON = 0;
  57   1        
  58   1      //  WDT_init(WDTS_IRCH, WDRE_reset, 0x0708); //¿´ÃÅ¹·Ê±ÖÓÎªIRCH,¸´Î»Ä£Ê½,¿´ÃÅ¹·Ê±¼äÎª1Ãë
  59   1        WDT_init(WDTS_XOSCL, WDRE_reset, 132);  //¿´ÃÅ¹·Ê±ÖÓÎªXOSCL(32.768KHz),¸´Î»Ä£Ê½,¿´ÃÅ¹·Ê±¼äÎª1Ãë
  60   1        WDT_FeedDog();  //Ë¢ÐÂ¿´ÃÅ¹·
  61   1        
  62   1        Gpio_Conf();  //IO¿ÚÅäÖÃ
  63   1        
  64   1        Uart0_Initial(19200);  //´®¿Ú0 38400
  65   1        
  66   1        GPIO_Init(P34F, P34_PWM3_SETTING);
  67   1        GPIO_Init(P16F, P16_PWM1_SETTING);
  68   1          
  69   1        PWM_init(PWM_CH1, Edge_Align, CKS_IH, Toggle_On, 0, Complementary_Off);   //Êä³ö·´Ïò¿ª£¬²»½øÈë»¥²¹Êä³ö
  70   1        PWM_init(PWM_CH3, Edge_Align, CKS_IH, Toggle_On, 0, Complementary_Off);   //Êä³ö·´Ïò¿ª£¬²»½øÈë»¥²¹Êä³ö
  71   1        
  72   1        PWM_CfgDivDuty(PWM_CH1, LEDW_PWM_FREQ, LEDW_PWM_FREQ);  //ÆµÂÊÎª5K,Õ¼¿Õ±È100%
  73   1        PWM_CfgDivDuty(PWM_CH3, LEDW_PWM_FREQ, LEDW_PWM_FREQ);  //ÆµÂÊÎª5K,Õ¼¿Õ±È100
  74   1        
  75   1        PWM_Update((1<<PWM_CH1)|(1<<PWM_CH3));      //µ±¸ÄÐ´ÁËPWMDIV¡¢PWMDUT¡¢PWMCKD¼Ä´æÆ÷Ê±,¼Ä´æÆ÷PWMUPD±ØÐëÖÃÎ»²ÅÄ
             -Ü¸üÐÂÊý¾Ý£¬Êý¾Ý¸üÐÂºó£¬PWMUPDÏàÓ¦Î»×Ô¶¯ÇåÁã 
  76   1      //  PWM_Update(1<<PWM_CH3);
  77   1        
  78   1        WaitPWMUpdateComplete();        //µÈ´ý¸üÐÂÍê³É
  79   1      
  80   1        PWM_EnContrl((1<<PWM_CH1)|(1<<PWM_CH3));        //PWM1Ê¹ÄÜ
  81   1      //  PWM_EnContrl(1<<PWM_CH3);       //PWM3Ê¹ÄÜ
  82   1      /***************************************************
  83   1      PWM3ÅäÖÃ
  84   1      ***************************************************/
  85   1      
  86   1      
  87   1        ADC_init(ADC_REF_VDD, Disable, Disable, NO_AMP);
  88   1        
  89   1        Timer0_Init(TIMER_Mode0, TIMER_Func_Timing, Enable, TIMER_Gate_Mode_Tr, TIMER_DIV);//TIME0¶¨Ê±Æ÷Ä£Ê½0¡¢¶¨
             -Ê±Æ÷¹Ø
  90   1        TIME_DIV_NUM = TIMER_DIV;       //  10msÊ±ÖÓÆµÂÊ3,6864M,1s=1/3.6863M=307200¸ö»úÆ÷ÖÜÆÚ,¼´10MSÖ´ÐÐ3072¸ö»úÆ÷ÖÜ
             -ÆÚ,¹Ê¶¨Ê±Æ÷³õÖµÎª2^13-3072=5120
  91   1        GPIO_Init(P20F,INPUT);            //¼ì²âµçÔ´µçÑ¹
  92   1        INT0_Init(P20_INDEX, INT_Trigger_Rising, 0);  //ÉèÖÃÎª×î¸ßÖÐ¶ÏÓÅÏÈ¼¶
  93   1        
  94   1      //  LED_init(LEN_IRCH, COM_H, SEG_L, LDRV_7, 2);
  95   1        LED_init(LEN_XOSCL, COM_H, SEG_L, LDRV_7, 0);
  96   1        
  97   1        RTC_init(RTCE_On, MSE_On, HSE_On);
  98   1        RTC_SetRTMSS(0);
  99   1        RTC_SetAlaramTime(5, 0, 0);  //ÄÖÖÓÔçÉÏ5µã
 100   1        RTC_AlarmCfg(HCE_On, MCE_On, SCE_On);
 101   1        INT8EN = 1;  //ÔÊÐíRTCÖÐ¶Ï;
 102   1        
 103   1        EA = 1;  //¿ª×ÜÖÐ¶Ï
 104   1        
 105   1        TS_init();
 106   1      //#if SUPPORT_KEY
 107   1      //  TSKey_init();
 108   1      //#endif
 109   1      
 110   1        Sys_Parameter_Init();    // sys_state.Power = SYS_POWER_IDLE;
 111   1      
 112   1        Uart0_Send_nData("MCUSTAR", 7);
 113   1        
C51 COMPILER V9.52.0.0   MAIN                                                              07/24/2018 11:06:11 PAGE 3   

 114   1        while(1)
 115   1        {
 116   2          WDT_FeedDog();
 117   2          
 118   2      //    TS_Action();
 119   2      //#if SUPPORT_KEY
 120   2      //    TS_GetKey();
 121   2      //#endif
 122   2          
 123   2          Power_Det_State = Power_Det();
 124   2          if(Power_Det_State != 0xff)
 125   2          {
 126   3            if(Power_Det_State == 0)
 127   3            {//¹Ø»ú
 128   4              LED_Display_Off();
 129   4              Power_Det_State = 0xff;
 130   4              BT_Power_Ctrl(BT_POWER_OFF);
 131   4              Enter_Sleep_Conf();
 132   4              sys_state.Power = SYS_POWER_DOWN;
 133   4              sys_state.Mode = SYS_IDLE;
 134   4              sys_state.Alarm = ALARM_IDLE;
 135   4      
 136   4            }
 137   3            else if(Power_Det_State == 1)
 138   3            {//¿ª»ú
 139   4             
 140   4              BT_Power_Ctrl(BT_POWER_ON);
 141   4              Quit_Sleep_Conf();
 142   4              sys_state.Power = SYS_POWER_NORMAL;
 143   4              sys_state.Mode = SYS_CLOCK;                 //Ò»¿ªÊ¼SYS_STATE.MODE=SYS_CLOCK
 144   4            }
 145   3          }
 146   2          
 147   2          if(sys_state.Power == SYS_POWER_NORMAL)
 148   2          {
 149   3      //      BT_Power_Ctrl(BT_POWER_OFF);
 150   3            TS_Action();
 151   3            
 152   3            Key_Scan(); 
 153   3      
 154   3            BTCmd_Resend();
 155   3            BT_CmdProcess();
 156   3          
 157   3            FM_Init();
 158   3            FM_Auto_Scan();
 159   3            FM_CH_Change(); 
 160   3            Set_Alarm();  
 161   3            Alarm_LED_Ctrl();
 162   3            LED_CIRCLE_SHOW();
 163   3            RGB_GREEN_DIS(1);
 164   3      //      PWM3_init();
 165   3          }
 166   2          else if(sys_state.Power == SYS_POWER_DOWN)
 167   2          {
 168   3            if(POWER_PIN_DATA == 1)
 169   3            {
 170   4              
 171   4            }
 172   3          }
 173   2          else if(sys_state.Power == SYS_POWER_SLEEP)
 174   2          {
 175   3            if(POWER_PIN_DATA == 0)
C51 COMPILER V9.52.0.0   MAIN                                                              07/24/2018 11:06:11 PAGE 4   

 176   3            {
 177   4              LED_Display_Off();
 178   4      //        Power_Det_State = 0xff;
 179   4              BT_Power_Ctrl(BT_POWER_OFF);
 180   4              Enter_Sleep_Conf();
 181   4              sys_state.Power = SYS_POWER_DOWN;
 182   4              sys_state.Mode = SYS_IDLE;
 183   4              sys_state.Alarm = ALARM_IDLE;
 184   4      //        while(POWER_PIN_DATA == 0)
 185   4      //        {
 186   4      //          WDT_FeedDog();
 187   4      //        }
 188   4      //        Quit_Sleep_Conf();
 189   4            }
 190   3            else
 191   3            {
 192   4      //        if(KeysFlagSN & 0x0001)
 193   4      //        {
 194   4      //          BT_Power_Ctrl(BT_POWER_ON);
 195   4      //          Quit_Sleep_Conf();
 196   4      //          sys_state.Power = SYS_POWER_NORMAL;
 197   4      //        }
 198   4            }
 199   3          }
 200   2          
 201   2        }
 202   1      
 203   1        
 204   1      }
 205          
 206          #endif


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    431    ----
   CONSTANT SIZE    =      8    ----
   XDATA SIZE       =      2    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
