#ifndef _TS_SERVICE_C_
#define _TS_SERVICE_C_

/*********************************************************************************************************************/
#include "ca51f_config.h"
#if (IC_TYPE == IC_TYPE_CA51F2X)
#include "includes\ca51f2sfr.h"
#include "includes\ca51f2xsfr.h"
#include "includes\gpiodef_f2.h"
#elif (IC_TYPE == IC_TYPE_CA51F3X)
#include "includes\ca51f3sfr.h"
#include "includes\ca51f3xsfr.h"
#include "includes\gpiodef_f3.h"
#endif
#include "includes\system.h"
#include "Library\Includes\rtc.h"		
#include "Library\Includes\system_clock.h"		
#include "Library\includes\uart.h"
#include "Library\includes\delay.h"
#include <intrins.h>
/*********************************************************************************************************************/
#include "TS_Lib\Includes\ts_configuration.h"
#include "TS_Lib\Includes\ts_def.h"
#include "TS_Lib\Includes\ts_api.h"
#include "TS_Lib\Includes\ts_service.h"		  
/*********************************************************************************************************************/
code unsigned int TS_CH_INFO_SEQ[][2]=
{
#if SUPPORT_KEY
	KEY_SEQ
#endif
#if (WHEEL_SLIDER_COUNT > 0)
	WHEEL_SLIDER0_SEQ
#endif
#if (WHEEL_SLIDER_COUNT > 1)
	WHEEL_SLIDER1_SEQ
#endif
#if (WHEEL_SLIDER_COUNT > 2)
	WHEEL_SLIDER2_SEQ
#endif
#if (WHEEL_SLIDER_COUNT > 3)
	WHEEL_SLIDER3_SEQ
#endif
};
code unsigned char SLIDER_CH_COUNT[]=
{
	WHEEL_SLIDER0_CH_COUNT,
#if (WHEEL_SLIDER_COUNT > 1)
	WHEEL_SLIDER1_CH_COUNT,
#endif
#if (WHEEL_SLIDER_COUNT > 2)
	WHEEL_SLIDER2_CH_COUNT,
#endif	
#if (WHEEL_SLIDER_COUNT > 2)
	WHEEL_SLIDER3_CH_COUNT,
#endif	
};
code unsigned char WHEEL_SLIDER0_MAX_RATE_TAB[]={WHEEL_SLIDER0_CH_MAX_RATE};
#if (WHEEL_SLIDER_COUNT > 1)
code unsigned char WHEEL_SLIDER1_MAX_RATE_TAB[]={WHEEL_SLIDER1_CH_MAX_RATE};
#endif
#if (WHEEL_SLIDER_COUNT > 2)
code unsigned char WHEEL_SLIDER2_MAX_RATE_TAB[]={WHEEL_SLIDER2_CH_MAX_RATE};
#endif
#if (WHEEL_SLIDER_COUNT > 3)
code unsigned char WHEEL_SLIDER3_MAX_RATE_TAB[]={WHEEL_SLIDER2_CH_MAX_RATE};
#endif
code unsigned char *WHEEL_SLIDER_MAX_RATE[]=
{
	WHEEL_SLIDER0_MAX_RATE_TAB,
#if (WHEEL_SLIDER_COUNT > 1)
	WHEEL_SLIDER1_MAX_RATE_TAB,
#endif
#if (WHEEL_SLIDER_COUNT > 2)
	WHEEL_SLIDER2_MAX_RATE_TAB,
#endif
#if (WHEEL_SLIDER_COUNT > 3)
	WHEEL_SLIDER3_MAX_RATE_TAB,
#endif
};
code unsigned char POSITION_CORRECTION_FACTOR[]=
{
	WHEEL_SLIDER0_POSITION_CORRECTION_FACTOR,
#if (WHEEL_SLIDER_COUNT > 1)
	WHEEL_SLIDER1_POSITION_CORRECTION_FACTOR,
#endif
#if (WHEEL_SLIDER_COUNT > 2)
	WHEEL_SLIDER2_POSITION_CORRECTION_FACTOR,
#endif	
#if (WHEEL_SLIDER_COUNT > 3)
	WHEEL_SLIDER3_POSITION_CORRECTION_FACTOR,
#endif	
};
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//´¥Ãþ¹Ü½Å³õÊ¼»¯
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
void TS_IO_init(void)
{
	unsigned char i;
#if (IC_TYPE == IC_TYPE_CA51F2X)
	code unsigned char *pXSFR[]=
	{
		&P70F,
		&P67F,
		&P66F,
		&P37F,
		&P36F,
		&P33F,
		&P32F,
		&P47F,
		&P46F,
		&P45F,
		&P44F,
		&P43F,
		&P42F,
		&P41F,
		&P40F,
		&P34F,
		&P35F,
		&P56F,
		&P50F,
		&P51F,
		&P52F,
		&P53F,
		&P54F,
		&P55F,
	};
#elif (IC_TYPE == IC_TYPE_CA51F3X)
	code unsigned char *pXSFR[]=
	{
		&P10F,
		&P11F,
		&P12F,
		&P13F,
		&P14F,
		&P15F,
		&P16F,
		&P17F,
		&P37F,
		&P36F,
		&P35F,
		&P34F,
		&P07F,
		&P06F,
		&P05F,
		&P04F,
		&P03F,
		&P02F,
		&P01F,
		&P00F,
	};     
#endif
	unsigned char *pPinS;
#if (IC_TYPE == IC_TYPE_CA51F2X)
	GPIO_Init(P57F,P57_CAP_SETTING);
#elif (IC_TYPE == IC_TYPE_CA51F3X)
	GPIO_Init(P21F,P21_CAP_SETTING);
#endif
	for(i = 0; i < OPENED_TS_COUNT; i++)
	{
		pPinS = pXSFR[TS_CH_INFO_SEQ[i][0]&0x7F];
		*pPinS = 4;
	}
}
code unsigned long int MASK_TAB[24]=
{
	0x000001,
	0x000002,
	0x000004,
	0x000008,
	0x000010,
	0x000020,
	0x000040,
	0x000080,
	0x000100,
	0x000200,
	0x000400,
	0x000800,
	0x001000,
	0x002000,
	0x004000,
	0x008000,
	0x010000,
	0x020000,
	0x040000,
	0x080000,
	0x100000,
	0x200000,
	0x400000,
	0x800000,
};


void TS_MS_ISR (void)
{
	static unsigned char xdata ms_cnt = 0;
	unsigned char i;
	if(TS_ScanTimer) 
	{
		TS_ScanTimer--;
	}	   
	if(TS_InitTimer) 
	{
		TS_InitTimer--;
	}
	ms_cnt++;
	if(ms_cnt >= 4)
	{
		ms_cnt = 0;
		for(i = 0; i < OPENED_TS_COUNT; i++)
		{
			if(TS_AreaConfirmTimer[i])
			{
				TS_AreaConfirmTimer[i]--;
			}
		}

		if(TS_RefCHBaseConfirmTimer)
		{
			TS_RefCHBaseConfirmTimer--;
		}

#if SUPPORT_WHEEL_SLIDER
		for(i = 0; i < WHEEL_SLIDER_COUNT; i++)
		{
			if(TSWheelSlider_TouchConfirmTimer[i])
			{
				TSWheelSlider_TouchConfirmTimer[i]--;
			}
		}	
#endif
	}	
	if(TS_DataLoadFlag)
	{
		if(!TS_ScanTimer)
		{
#if (SUPPORT_STOP_MODE_AUTO_SCAN || SUPPORT_STOP_MODE_MANUAL_SCAN)
			if(EnterStopScanTimer)
#endif
			{
				TS_ScanTimer = TS_SCAN_INTERVAL;
				TS_Index = 0;
				TS_ScanStart();									
			}
			TS_DataLoadFlag = 0;	
		}
	}	
}
void TS_HS_ISR (void)
{
	unsigned char i;
#if SUPPORT_KEY
#if (FINGER_LONG_TOUCH_TIME_LIMIT > 0)
	for(i = 0; i < KEY_CH_COUNT; i++)
	{
		if(TSKey_LongTouchLimitTimer[i])
		{
			TSKey_LongTouchLimitTimer[i]--;
		}
	}
#endif
#endif
	if(TS_RefCHRefBaseLineAdjuTimer)
	{
		TS_RefCHRefBaseLineAdjuTimer--;
	}	
#if (SUPPORT_STOP_MODE_AUTO_SCAN || SUPPORT_STOP_MODE_MANUAL_SCAN)
	if(EnterStopScanTimer)
	{
		EnterStopScanTimer--;
	}	
#endif	
}
void TS_ISR (void)
{	
	unsigned char index_copy,i;
	WORD_UNION TS_Data[6];

	index_copy = INDEX;
	for(i = 0; i < 6; i++)
	{
		if(TKIF & (1<<i))
		{
			TKIF = (1<<i);	
			INDEX = i;
			TS_Data[i].bVal[0] = TKMSH;
			TS_Data[i].bVal[1] = TKMSL;
		}
	}
	for(i = 0; i < 6; i++)
	{
		if(TS_Index+i == OPENED_TS_COUNT)
		{
			TS_RefChRawData = TS_Data[i].wVal;	
			break;
		}
		TS_RawData[TS_Index+i] = TS_Data[i].wVal;	
	}
	if(TS_Index+6 > OPENED_TS_COUNT)
	{
		TS_CycleScanDoneFlag = 1;				
	}
	else 
	{
		TS_Index += 6;
		TS_ScanStart();	
	}
	INDEX = index_copy;
}

void TS_ScanStart(void)
{	
	unsigned char i,j;	   
	for(i = 0; i < 6; i++)					
	{
		if(TS_Index + i >= OPENED_TS_COUNT)
		{
			INDEX = i;
#if  (IC_TYPE == IC_TYPE_CA51F2X)
			TKCHS = POL(0) | TKCHS(25);
#elif  (IC_TYPE == IC_TYPE_CA51F3X)	
			TKCHS = POL(0) | TKCHS(21);
#endif	
			for(j = i+1; j < 6; j++)
			{
				INDEX = j;
				TKCHS = POL(0) | TKCHS(0);	
			}
			break;
		}
		INDEX = i;
		TKCHS = POL(0) | TKCHS(((unsigned char)TS_CH_INFO_SEQ[TS_Index+i][0]&0x7F)+1);	
		
	}
	TKCON |= TKST(1);
}
#if SUPPORT_STOP_MODE_AUTO_SCAN
void TS_EnterStopModeAutoScan(void)
{
	unsigned char i,j;
	unsigned int wakeup_thd;
	TS_DataLoadFlag = 0;
	EA = 0;
	for(i = 0,j = 0; i < OPENED_TS_COUNT; i++)	
	{
		if(TS_CH_INFO_SEQ[i][0] & WAKEUP)
		{
			INDEX = j;
			TKCHS = POL(0) | TKCHS((TS_CH_INFO_SEQ[i][0]&0x7F)+1);	
			wakeup_thd = TS_BaseLineData[i] - (TS_CH_INFO_SEQ[i][1]*WAKEUP_THRESHOLD_RATE)/100;
			ATKCH = (unsigned char)(wakeup_thd>>8);	
			ATKCL = (unsigned char)(wakeup_thd);	
			j++;
			if(j >= 6)
			{
				break;
			}			
		}				
	}
	if(j < 6)
	{
		for(i = j; i < 6; i++)	
		{
			INDEX = i;
			TKCHS = POL(0) | 0;	
		}
	}
	RTCON &=  ~(MSE(1) | HSE(1));
	TKMTS = SAVE_MODE_SCAN_INTERVAL_TIME;	//9.766ms
	TKCON |= TMEN(1)|TWKE(1);
	TKIF = 0x3F;
	TKCON |= TKST(1);
	
#if (SYSCLK_SRC == PLL)
	Sys_Clk_Set_IRCH();
	PLLCON = 0;
#endif
	I2CCON = 0;
	CKCON = 0;
		
	MECON |= (1<<6);
	ADCON = 1;
	
	
	PWCON = 0x44;	

	while(1)
	{
		PCON |= (1<<1);
		if(TKIF != 0)
		{
			PWCON = 0x4B;
			TKIF = 0x3F;
#if (SYSCLK_SRC == PLL)
			Sys_Clk_Set_PLL(PLL_Multiple);
#endif
			TKCON &= ~(TMEN(1)|TWKE(1));
			RTCON |=  (MSE(1) | HSE(1));
			TS_ScanTimer = TS_SCAN_INTERVAL;
			TS_Index = 0;
			TS_ScanStart();
			TS_DataLoadFlag = 0;
			EnterStopScanTimer = ENTER_STOP_WAKEUP_TIME;		
			EA = 1;
			break;
		}	
	}
}
#endif
#if SUPPORT_STOP_MODE_MANUAL_SCAN
unsigned char xdata StopScanCh[24];
unsigned char xdata StopScanChCnt;
unsigned int xdata WakeUp_ThdVal[24];
void TS_SetStopScanCh(unsigned char idx)
{
	unsigned char i;
	for(i = 0; i < 6; i++)	
	{
		INDEX = i;
		if(i+idx < StopScanChCnt)
		{
			TKCHS = POL(0) | TKCHS(StopScanCh[idx+i]);				
		}
		else
		{
			TKCHS = POL(0) | 0;		
		}			
	}	
}
void TS_EnterStopModeManaulScan(void)
{
	unsigned char i,ts_idx;
	unsigned char Count = 0;
	unsigned int ts_data;
	TS_DataLoadFlag = 0;
	StopScanChCnt = 0;
// 	GPIO_Init(P30F,OUTPUT);
	ILCFGH=0;
	ILCFGL=0;
// 	RTCON =  0;
// 	RTCIF = RTC_MF | RTC_HF;		


	for(i = 0; i < OPENED_TS_COUNT; i++)	
	{
		if(TS_CH_INFO_SEQ[i][0] & WAKEUP)
		{
			StopScanCh[StopScanChCnt] = (TS_CH_INFO_SEQ[i][0]&0x7F)+1;
			WakeUp_ThdVal[StopScanChCnt] = TS_BaseLineData[i] - (TS_CH_INFO_SEQ[i][1]*WAKEUP_THRESHOLD_RATE)/100;
			StopScanChCnt++;	
		}				
	}	
	Uart0_PutChar(0xaa);
	Uart0_PutChar(StopScanChCnt);
	Uart0_PutChar(StopScanCh[0]);
	Uart0_PutChar(StopScanCh[1]);
	Uart0_PutChar(StopScanCh[2]);
	Uart0_PutChar(StopScanCh[3]);
	Uart0_PutChar(StopScanCh[4]);
	Uart0_PutChar(StopScanCh[5]);
	Uart0_PutChar(StopScanCh[6]);
	Delay_ms(3);
	EA = 0;
	RTCON &=  ~(MSE(1) | HSE(1));
	RTCIF = RTC_MF | RTC_HF;		
	TKCON |= TMEN(1);
	TKMTS = SAVE_MODE_SCAN_INTERVAL_TIME;
// 	Sys_Clk_Set_IRCL();
// 	TKCFG = TKDIV(0)|TKTMS(10);		
#if (SYSCLK_SRC == PLL)
	
	PLLCON = 0;
#endif
	I2CCON = 0;
	CKCON = 0;
		
	MECON |= BIT6;
	ADCON = 1;
	
	TKIF = 0x3F;
	PWCON = 0x44;	
	ts_idx = 0;
	TS_SetStopScanCh(ts_idx);
	TKCON |= TKST(1);
	GPIO_Init(P30F,OUTPUT);
	while(1)
	{
		PCON |= BIT1;
		_nop_();
		_nop_();
		_nop_();
		_nop_();
// 		if(TKIF != 0)
		{
			/*
			for(i = 0; i < 6; i++)
			{
				if(TKIF & (1<<i))
				{
					INDEX = i;
					ts_data = TKMSH*256 + TKMSL;
					if(ts_data <= 0)//WakeUp_ThdVal[ts_idx + i])
					{
						PWCON = 0x4B;
						TKIF = 0x3F;		
			#if (SYSCLK_SRC == PLL)
						Sys_Clk_Set_PLL(PLL_Multiple);
			#else
						Sys_Clk_Set_IRCH();		
			#endif
						
						RTCON |= HSE(1)|MSE(1);
						TKCON &= ~(TMEN(1));
						
						TS_ScanTimer = TS_SCAN_INTERVAL;
						TS_Index = 0;
						TS_ScanStart();
						TS_DataLoadFlag = 0;
						EnterStopScanTimer = ENTER_STOP_WAKEUP_TIME;	
						EA = 1;
						Uart0_PutChar(0xaa);
						Uart0_PutChar(ts_idx + i);
						Uart0_PutChar(ts_data>>8);
						Uart0_PutChar(ts_data);
						Uart0_PutChar( WakeUp_ThdVal[ts_idx + i]>>8);
						Uart0_PutChar( WakeUp_ThdVal[ts_idx + i]);
						
						Uart0_PutChar(StopScanCh[0]);
						return;;					
					}
				}
			}	
			*/
			TKIF = 0x3F;
			if(StopScanChCnt>7)
			{
				while(SP);
			}
			if((ts_idx + 6) >= StopScanChCnt)
			{
				ts_idx = 0;
				Count++;
// 					EA = 1;
// 					Uart0_PutChar(0x99);
// 					Delay_ms(1);
// 					EA = 0;
				P30=1;
			}
			else
			{
				ts_idx += 6;
// 				EA = 1;
// 					Uart0_PutChar(0xcc);
// 					Delay_ms(1);
// 					EA = 0;
				P30=0;
			}
			TS_SetStopScanCh(ts_idx);	
// 			TKCON |= TKST(1);
		}
	}

}
#endif
void TS_RunInit(void)
{
	unsigned char i;

	static unsigned char TS_ScanTimes=0;
	if(TS_Init_Step == 0)
	{
		if(!TS_InitTimer)
		{
			TS_InitTimer = 2;
			TS_Init_Step = 1;	
		}
	}
  else if(TS_Init_Step == 1)
	{
		TS_Index = 0;
		TS_ScanStart();	
		TS_Init_Step = 2;		
		TS_ScanTimes = 100;		
	}
	else if(TS_Init_Step == 2)
	{
		if(TS_CycleScanDoneFlag)
		{
			TS_CycleScanDoneFlag = 0;
// 			if(--TS_ScanTimes)
// 			{
// 				TS_Index = 0;
// 				TS_ScanStart();						
// 				return;
// 			}
			PhoneInterfFlag = 0;
			TS_RefCHRefBaseLineAdjuTimer = 0;
			for(i = 0; i < OPENED_TS_COUNT; i++)
			{	
				TS_FilterBuf[i] = TS_RawData[i]*FILTER_COUNT;
				TS_BaseLineData[i] = TS_RawData[i];			
				TS_FirstAreaData[i] = TS_RawData[i]; 
				TS_AreaConfirmTimerSet(i,AREA_PNOISE);
			}	
			

			TS_RefCHRefBaseLine = TS_RefChRawData;
			
			TS_RefChBaseLineData  = TS_RefChRawData;	
			TS_RefChFilterBuf 	  = TS_RefChRawData*FILTER_COUNT;	
			TS_RefCHBaseConfirmTimer = REF_CH_BASE_CONFIRM_TIME;
			TS_RefCHCmpData = TS_RefChBaseLineData;
			TS_State = TS_DEAL;	

			TS_Index = 0;
			TS_ScanStart();							
		}
	}
}
unsigned char TS_GetDataArea(unsigned char ts_ch,unsigned int ts_data)
{
	int Delta;
	int NoiseThd,FingerThd;
#if SUPPORT_TOP_AREA
	int OverHighThd;
#endif
	
	Delta 	= (int)TS_BaseLineData[ts_ch] - (int)ts_data;

	FingerThd = (TS_CH_INFO_SEQ[ts_ch][1]*FINGER_KEY_THRESHOLD_RATE)/100;		
	NoiseThd 	= 	(TS_CH_INFO_SEQ[ts_ch][1]*NOISE_THRESHOLD_RATE)/100;	
#if SUPPORT_TOP_AREA
	OverHighThd = 	(TS_CH_INFO_SEQ[ts_ch]*TOP_RATE)/100;	
#endif


#if SUPPORT_TOP_AREA
	if(Delta >= OverHighThd)  	return AREA_OVER_HIGH;
	else 
#endif
	if(Delta >= FingerThd)	return AREA_FINGER_TOUCH; 
	else if(Delta > NoiseThd)	return AREA_PNOISE_PLUS; 
	else if(Delta >= 0)			return AREA_PNOISE;
	else if(Delta >= -NoiseThd) return AREA_NNOISE;
	else 						return AREA_OVER_LOW;

}
unsigned char TS_AreaDeviateDetection(	unsigned char ts_ch,unsigned int cmp_data,unsigned int real_data,unsigned char area)
{	
	int Delta,permit_devia;
	unsigned char rate;
	switch(area)
	{
#if SUPPORT_TOP_AREA
		case AREA_OVER_HIGH:
			rate = AREA_OVERHIGH_PERMITTED_DEVIATION_RATE;
			break;
#endif
		case AREA_PNOISE_PLUS:
			rate = AREA_PNOISE_PLUS_PERMITTED_DEVIATION_RATE;
			break;
		case AREA_PNOISE:
			rate = AREA_PNOISE_PERMITTED_DEVIATION_RATE;
			break;
		case AREA_NNOISE:
			rate = AREA_NNOISE_PERMITTED_DEVIATION_RATE;
			break;
		case AREA_OVER_LOW:
			rate = AREA_OVERLOW_PERMITTED_DEVIATION_RATE;
			break;
		default:
			break;
	}
	permit_devia = (TS_CH_INFO_SEQ[ts_ch][1]*rate)/100;

	Delta 	= (int)cmp_data - (int)real_data;

	if((Delta <= permit_devia) && (Delta >= -permit_devia))
	{
		return 1;
	}
	else
	{
		return 0;	
	}		
}
void TS_AreaConfirmTimerSet(unsigned char ts_ch, unsigned char area)
{
	unsigned char set_value;

	switch(area)
	{
#if SUPPORT_TOP_AREA
		case AREA_OVER_HIGH:
			set_value = AREA_OVERHIGH_CONFIRM_TIME;
			break;
#endif
		case AREA_FINGER_TOUCH:
			set_value = FINGER_TOUCH_CONFIRM_TIME;
			break;
		case AREA_PNOISE_PLUS:
			set_value = AREA_PNOISE_PLUS_CONFIRM_TIME;
			break;
		case AREA_PNOISE:
			set_value = AREA_PNOISE_CONFIRM_TIME;
			break;
		case AREA_NNOISE:
			set_value = AREA_NNOISE_CONFIRM_TIME;
			break;
		case AREA_OVER_LOW:
			set_value = AREA_OVERLOW_CONFIRM_TIME;
			break;
		default:
			break;
	}
	TS_AreaConfirmTimer[ts_ch] = set_value;	
}

void TS_DataFiltering(void)
{
	unsigned char i;
	for(i = 0; i < OPENED_TS_COUNT; i++)
	{
		TS_FilterBuf[i] -= TS_FilterBuf[i]/FILTER_COUNT;
		TS_FilterBuf[i] += TS_RawData[i];		
		TS_PostData[i]  = TS_FilterBuf[i]/FILTER_COUNT;							  
 	}		
}
#if SUPPORT_KEY
void TSKey_DataDeal(void)
{
	unsigned char i;
	unsigned char  TouchArea,NowArea;	
	int  Delta;	
// Uart0_PutChar(0xaa);
	for(i = 0; i < KEY_CH_COUNT; i++)
	{						
		Delta 	= (int)TS_BaseLineData[i] - (int)TS_PostData[i];
// 		if(i==0)
		{
// 			Uart0_PutChar(i);
// 			Uart0_PutChar(TS_PostData[i]>>8);
// 			Uart0_PutChar(TS_PostData[i]);			
// 			Uart0_PutChar(TS_BaseLineData[i]>>8);
// 			Uart0_PutChar(TS_BaseLineData[i]);	
// 			if(Delta < 0)
// 			{
// 				Uart0_PutChar(0);
// 				Uart0_PutChar(0);
// 			}
// 			else
// 			{
// 				Uart0_PutChar(Delta>>8);	
// 				Uart0_PutChar(Delta);					
// 			}
		}
		TouchArea = TS_GetDataArea(i,TS_FirstAreaData[i]);
		NowArea   = TS_GetDataArea(i,TS_PostData[i]);

#if (SUPPORT_STOP_MODE_AUTO_SCAN || SUPPORT_STOP_MODE_MANUAL_SCAN)
		if((NowArea != AREA_PNOISE)&&(NowArea != AREA_NNOISE))
		{
			EnterStopScanTimer = ENTER_STOP_WAKEUP_TIME;
		}
#endif
		
		if(TouchArea == AREA_FINGER_TOUCH)
		{
			if(NowArea == AREA_FINGER_TOUCH)
			{
				if(!(KeysFlagSN & MASK_TAB[i]))
				{
					if(!TS_AreaConfirmTimer[i])
					{		
						KeysFlagSN |= MASK_TAB[i];		
#if (FINGER_LONG_TOUCH_TIME_LIMIT > 0)
						TSKey_LongTouchLimitTimer[i] = FINGER_LONG_TOUCH_TIME_LIMIT;
#endif
						if((PhoneInterfFlag)&&(FINGER_TOUCH_RELEASE_CONFIRM_TIME < 5))
						{
							TS_AreaConfirmTimer[i] = 5;	
						}
						else
						{
							TS_AreaConfirmTimer[i] = FINGER_TOUCH_RELEASE_CONFIRM_TIME;	
						}
					}
				}
				else
				{
					TS_AreaConfirmTimer[i] = FINGER_TOUCH_RELEASE_CONFIRM_TIME;
#if (FINGER_LONG_TOUCH_TIME_LIMIT > 0)
					if(!TSKey_LongTouchLimitTimer[i])
					{
						KeysFlagSN &= ~MASK_TAB[i];
						TS_FirstAreaData[i] = TS_PostData[i];
						TS_BaseLineData[i] 	= TS_PostData[i];
						TS_AreaConfirmTimerSet(i,AREA_PNOISE);			
					}						
#endif
				}				
			}
			else
			{
				if(KeysFlagSN & MASK_TAB[i]) 
				{
					if(!TS_AreaConfirmTimer[i])
					{
						KeysFlagSN &= ~MASK_TAB[i];
						TS_FirstAreaData[i] = TS_PostData[i];
						TS_AreaConfirmTimerSet(i,NowArea);
					}					
				}			
				else
				{
					TS_FirstAreaData[i] = TS_PostData[i];
					TS_AreaConfirmTimerSet(i,NowArea);
				}	
			}	
			continue;						
		}	
		else
		{
			if(NowArea == AREA_FINGER_TOUCH)
			{
				TS_FirstAreaData[i] = TS_PostData[i];
				TS_AreaConfirmTimerSet(i,AREA_FINGER_TOUCH);
				continue;		
			}	
		}
					
		if(TS_AreaDeviateDetection(i,TS_FirstAreaData[i],TS_PostData[i],TouchArea))	   //ÅÐ¶ÏÆ«²îÊÇ·ñÔÚÔÊÐí·¶Î§ÄÚ
		{	
			if(!TS_AreaConfirmTimer[i])
			{
				TS_FirstAreaData[i] = TS_PostData[i];
				TS_BaseLineData[i] 	= TS_PostData[i];
				TS_AreaConfirmTimerSet(i,AREA_PNOISE);				
			}		
		}
		else
		{
			TS_FirstAreaData[i] = TS_PostData[i];	
			TS_AreaConfirmTimerSet(i,NowArea);				
		}
	}	 	
}
#endif
#if SUPPORT_WHEEL_SLIDER
void TSWheelSliderGetTouchToggleInfo(unsigned char num)
{
	unsigned char i;
	unsigned int  Rate;
	unsigned int  RateMin,RateSec;
	int  Delta;

	RateMin = 0xFFFF; 			
	RateSec = 0xFFFF;
	for(i = 0; i < SLIDER_CH_COUNT[num]; i++)	
	{
		Delta 	= (int)TS_BaseLineData[TS_BaseCh + i] - (int)TS_PostData[TS_BaseCh + i];	
		if(Delta <= 0) Delta = 1;
		Rate = TS_BaseLineData[TS_BaseCh + i]/Delta;	//»ù×¼ÖµÓë²îÖµµÄ±ÈÂÊ
					
		if(Rate < RateMin) 	//²éÕÒ»ù×¼ÖµÓë²îÖµµÄ±ÈÂÊ×îÐ¡µÄ´¥ÃþÍ¨µÀ
		{
			RateSec = RateMin; 
			RateMin = Rate;
			Toggleinfo.SecMinChIdx = Toggleinfo.MinChIdx;	
			
			Toggleinfo.Delta2 = Toggleinfo.Delta1;	
			Toggleinfo.Delta1 = Delta;	//¼ÇÂ¼±ÈÂÊ×îÐ¡Í¨µÀµÄDelta
			Toggleinfo.MinChIdx = i;		//¼ÇÂ¼±ÈÂÊ×îÐ¡Í¨µÀµÄË÷ÒýÖµ
		}
		else if(Rate < RateSec)//²éÕÒ»ù×¼ÖµÓë²îÖµµÄ±ÈÂÊ´ÎÐ¡µÄ´¥ÃþÍ¨µÀ
		{
			RateSec = Rate;
			Toggleinfo.SecMinChIdx = i;	//¼ÇÂ¼±ÈÂÊ´ÎÐ¡Í¨µÀµÄË÷ÒýÖµ
			Toggleinfo.Delta2 = Delta;	//¼ÇÂ¼±ÈÂÊ´ÎÐ¡Í¨µÀµÄDelta
		}
	}
}


unsigned char IsValidCh(unsigned char minchidx,unsigned char secchidx,unsigned char ch_size)
{
	unsigned char Temp;
	if(minchidx > secchidx) 
	{
		Temp = secchidx;
	}
	else
	{
		Temp = minchidx;
	}
	if(Temp != (minchidx+secchidx)/2)
	{
		if((minchidx*secchidx != 0) && (minchidx + secchidx+1) != ch_size)
		{
			return 0;
		}
	}
	return 1;
}

void TSWheelSliderWheelTogChDataCal(void)
{
	unsigned long int CalcTemp1,CalcTemp2;
	unsigned int Temp;
	unsigned char minidx,secidx;
	
	minidx = Toggleinfo.MinChIdx + TS_BaseCh;
	secidx = Toggleinfo.SecMinChIdx + TS_BaseCh;
	
	CalcTemp1 = (unsigned long int)(TS_BaseLineData[minidx]) * (unsigned long int)(TS_BaseLineData[secidx]);
	CalcTemp2 = CalcTemp1;
	CalcTemp1 >>= 6;

	CalcTemp1 *= (unsigned long int)TS_PostData[secidx];
		
	CalcTemp2 += ((unsigned long int)TS_BaseLineData[secidx] - (unsigned long int)TS_BaseLineData[minidx]) * (unsigned long int)TS_PostData[secidx];
	CalcTemp2 >>= 6;
	Toggleinfo.Delta2 = TS_BaseLineData[minidx] - (unsigned int)(CalcTemp1/CalcTemp2);	

	if(Toggleinfo.Delta2 > Toggleinfo.Delta1)
	{
		Temp = Toggleinfo.Delta2;
		Toggleinfo.Delta2 = Toggleinfo.Delta1;
		Toggleinfo.Delta1 = Temp;
		Temp = (unsigned int)Toggleinfo.SecMinChIdx;
		Toggleinfo.SecMinChIdx = Toggleinfo.MinChIdx;
		Toggleinfo.MinChIdx = (unsigned char)Temp;
	}
}

unsigned char RateFilter(unsigned char rate,unsigned int *filterBuf,unsigned char touchFlag)
{
	if(!touchFlag)
	{
		*filterBuf = rate*4;
	}
	else
	{
		*filterBuf = *filterBuf -	*filterBuf/4 + rate;
	}
	return (*filterBuf/4);	
}
unsigned int DeltaRateSumFilter(unsigned int rate,unsigned int *filterBuf,unsigned char touchFlag)
{
	if(!touchFlag)
	{
		*filterBuf = rate*5;
	}
	else
	{
		*filterBuf = *filterBuf -	*filterBuf/5 + rate;
	}
	return (*filterBuf/5);		
}
unsigned char WheelGetOffsetDirection(unsigned char minidx,unsigned char secidx)
{
	
	if(minidx > secidx)
	{
		if(minidx != secidx+1)
		{
			return 1;
		}
		else
		{
			return 0;
		}
	}
	else
	{
		if(secidx != minidx+1)
		{
			return 0;
		}
		else
		{
			return 1;
		}
	}
}
int WheelSliderPositionCorrection(int position, int factor)
{
	position += factor;
	if(position > 255)
	{
		position -= 256;
	}
	else if(position < 0)
	{
		position += 256;
	}
	return position;
}

unsigned char WheelSliderTouchJudge(unsigned char num)
{
	unsigned int  DeltaRateSum,Rate;

	unsigned int  gpTemp;
	unsigned int  Offset;
	unsigned char	*pRateMax;
	static unsigned int xdata FilterBuf[WHEEL_SLIDER_COUNT];
	static unsigned int xdata DeltaRateSumFilerBuf[WHEEL_SLIDER_COUNT];
	
	WheelSliderValidTouchFlag = 0;	
	pRateMax = WHEEL_SLIDER_MAX_RATE[num];
	
// 	if(num == 2)
// 	{
// 		int Delta;
// 		unsigned char i;
// 		Uart0_PutChar(0xaa);
// // 			Uart0_PutChar(num);
// 		for(i = 0; i < SLIDER_CH_COUNT[num]; i++)
// 		{
// 			Delta 	= (int)pWheelSliderBaseData[i] - (int)pWheelSliderPostData[i];
// 			Uart0_PutChar(pWheelSliderPostData[i]>>8);
// 			Uart0_PutChar(pWheelSliderPostData[i]>>0);
// 			Uart0_PutChar(pWheelSliderBaseData[i]>>8);
// 			Uart0_PutChar(pWheelSliderBaseData[i]>>0);
// 			Uart0_PutChar(Delta>>8);
// 			Uart0_PutChar(Delta>>0);
// 		}
// // 		Uart0_PutChar(Toggleinfo.MinChIdx);
// // 		Uart0_PutChar(Toggleinfo.SecMinChIdx);
// 	}
	TSWheelSliderGetTouchToggleInfo(num);


	DeltaRateSum = (unsigned int)(((unsigned long int)Toggleinfo.Delta1*10000)/(TS_CH_INFO_SEQ[TS_BaseCh+Toggleinfo.MinChIdx][1]*FINGER_WHEEL_SLIDER_THRESHOLD_RATE) 
	+ ((unsigned long int)Toggleinfo.Delta2*10000)/(TS_CH_INFO_SEQ[TS_BaseCh+Toggleinfo.SecMinChIdx][1]*FINGER_WHEEL_SLIDER_THRESHOLD_RATE));
	

// 	if(num==0)
// 	{
// 		Uart0_PutChar(0xaa);
// 		Uart0_PutChar(DeltaRateSum>>8);
// 		Uart0_PutChar(DeltaRateSum>>0);
// 	}

	if(DeltaRateSum < 100) //±ÈÂÊ×îÐ¡ºÍ´ÎÐ¡µÄÍ¨µÀµÄDeltaÖµºÍ¸÷×ÔÃÅÏÞÖµ°Ù·Ö±ÈÖ®ºÍ´óÓÚ100±íÊ¾ÓÐ´¥ÃþÊÂ¼þ
	{		
		return 0;
	}

		
// 	if(num==0)
// 	{
// 		Uart0_PutChar(Toggleinfo.MinChIdx + 0x30);	
// 		Uart0_PutChar(Toggleinfo.SecMinChIdx + 0x30);	
// 		Uart0_PutChar(' ');
// 		
// 		Uart0_PutChar(WheelSliderPositionTemp/100+0x30);		
// 		Uart0_PutChar((WheelSliderPositionTemp%100)/10+0x30);		
// 		Uart0_PutChar((WheelSliderPositionTemp%10)+0x30);	
// 		Uart0_PutChar('\r');	
// 		Uart0_PutChar('\n');	
// 	}
/**********************************************************************************************************/
//ÅÐ¶Ï´ËÁ½Í¨µÀÊÇ·ñÎªÏàÁÚÍ¨µÀ
	if(!IsValidCh(Toggleinfo.MinChIdx,Toggleinfo.SecMinChIdx,SLIDER_CH_COUNT[num]))
	{
		return 0;
	}
/**********************************************************************************************************/	
// 	if(num==0)
// 	{
// 		Uart0_PutChar(0xaa);
// 		Uart0_PutChar(Toggleinfo.MinChIdx);
// 		Uart0_PutChar(Toggleinfo.SecMinChIdx);
// 		Uart0_PutChar(Toggleinfo.Delta1);
// 		Uart0_PutChar(Toggleinfo.Delta2);
// 	}
// 	test_byte = 0xaa;
// 	if(num == 0)
// 	{
// 		test_byte = 0;
// 	}
	//Êý¾ÝÐ£Õý
	TSWheelSliderWheelTogChDataCal();
// 	if(num==0)
// 	{
// 		Uart0_PutChar(Toggleinfo.MinChIdx + 0x30);	
// 		Uart0_PutChar(Toggleinfo.SecMinChIdx + 0x30);	
// 		Uart0_PutChar('t');
// 		
// 		Uart0_PutChar(WheelSliderPositionTemp/100+0x30);		
// 		Uart0_PutChar((WheelSliderPositionTemp%100)/10+0x30);		
// 		Uart0_PutChar((WheelSliderPositionTemp%10)+0x30);	
// 		Uart0_PutChar('\r');	
// 		Uart0_PutChar('\n');	
// 	}	
	Rate = (Toggleinfo.Delta1*100)/(Toggleinfo.Delta1+Toggleinfo.Delta2);	//¼ÆËãDelta1Õ¼±È
// 	if(num==0)
// 	{
// 		Uart0_PutChar(0xaa);
// 		Uart0_PutChar(Toggleinfo.MinChIdx);
// 		Uart0_PutChar(Toggleinfo.SecMinChIdx);
// 		Uart0_PutChar(Toggleinfo.Delta1);
// 		Uart0_PutChar(Toggleinfo.Delta2);
// 		Uart0_PutChar(Rate);
// 	}		
	Rate = RateFilter(Rate,&FilterBuf[num],WheelSliderTouchFlag[num]);	//rateÂË²¨£¬Ïû³ý¶¶¶¯


	gpTemp = DeltaRateSumFilter(DeltaRateSum,&DeltaRateSumFilerBuf[num],WheelSliderTouchFlag[num]);
	
	
	if(DeltaRateSum >= (gpTemp*3)/4)
	{
		WheelSliderValidTouchFlag = 1;		
	}
	
  WheelSliderPositionTemp = Toggleinfo.MinChIdx*(256/SLIDER_CH_COUNT[num])+(128/SLIDER_CH_COUNT[num]);

	if(Rate >= pRateMax[Toggleinfo.MinChIdx])
	{
		Offset = 0;
	}
	else
	{
		Offset = ((pRateMax[Toggleinfo.MinChIdx] - Rate)*(128/SLIDER_CH_COUNT[num]))/(pRateMax[Toggleinfo.MinChIdx]-50);
	}
// 	if(num==2)
// 	{

// 		Uart0_PutChar(Toggleinfo.MinChIdx + 0x30);	
// // 		Uart0_PutChar(Toggleinfo.SecMinChIdx + 0x30);	
// 		Uart0_PutChar(' ');
// 		
// 		Uart0_PutChar(Rate/100+0x30);		
// 		Uart0_PutChar((Rate%100)/10+0x30);		
// 		Uart0_PutChar((Rate%10)+0x30);	
// 		Uart0_PutChar('\r');	
// 		Uart0_PutChar('\n');	
// 	}	

	if(WheelGetOffsetDirection(Toggleinfo.MinChIdx,Toggleinfo.SecMinChIdx))
	{
		WheelSliderPositionTemp += Offset;
	}
	else
	{
		WheelSliderPositionTemp -= Offset;
	}
	
	WheelSliderPositionTemp = WheelSliderPositionCorrection(WheelSliderPositionTemp,POSITION_CORRECTION_FACTOR[num]);
	if(WheelSliderPositionTemp > 255) WheelSliderPositionTemp = 255;
// 	if(num==2)
// 	{
// 		Uart0_PutChar(Toggleinfo.MinChIdx + 0x30);	
// 		Uart0_PutChar(Toggleinfo.SecMinChIdx + 0x30);	
// 		Uart0_PutChar(' ');
// 		
// 		Uart0_PutChar(WheelSliderPositionTemp/100+0x30);		
// 		Uart0_PutChar((WheelSliderPositionTemp%100)/10+0x30);		
// 		Uart0_PutChar((WheelSliderPositionTemp%10)+0x30);	
// 		Uart0_PutChar(' ');
// 		Uart0_PutChar(WheelSliderState[num]+0x30);		
// 		Uart0_PutChar(WheelSliderTouchFlag[num]+0x30);		
// 		
// 		Uart0_PutChar('\r');	
// 		Uart0_PutChar('\n');	
// 	}	
	return 1;

}
void TS_WheelSliderDeal(void)
{
	unsigned char num,i;
	unsigned char  TouchArea,NowArea;
	int   Delta;
	
	TS_BaseCh = KEY_CH_COUNT; 
	for(num = 0; num < WHEEL_SLIDER_COUNT; num++)
	{
		if(WheelSliderState[num] == WHEEL_SLIDER_NO_TOUCH)
		{
			if(!WheelSliderTouchFlag[num])
			{
				if(WheelSliderTouchJudge(num))
				{
					WheelSliderTouchFlag[num] = 1;	
					TSWheelSlider_TouchConfirmTimer[num] = WHEEL_SLIDER_TOUCH_CONFIRM_TIME;				
				}
				else
				{
					for(i = TS_BaseCh; i < TS_BaseCh + SLIDER_CH_COUNT[num]; i++)
					{						
						Delta 	= (int)TS_BaseLineData[i] - (int)TS_PostData[i];
						TouchArea = TS_GetDataArea(i,TS_FirstAreaData[i]);
						NowArea   = TS_GetDataArea(i,TS_PostData[i]);
						
						if(TS_AreaDeviateDetection(i,TS_FirstAreaData[i],TS_PostData[i],TouchArea))	   //ÅÐ¶ÏÆ«²îÊÇ·ñÔÚÔÊÐí·¶Î§ÄÚ
						{
							if(!TS_AreaConfirmTimer[i])
							{
								TS_FirstAreaData[i] = TS_PostData[i];
								TS_BaseLineData[i] 	= TS_PostData[i];
								TS_AreaConfirmTimerSet(i,AREA_PNOISE);	
							}		
						}
						else
						{
							TS_FirstAreaData[i] = TS_PostData[i];
							TS_AreaConfirmTimerSet(i,AREA_PNOISE);	
						}
					}
				}			
			}	
			else
			{	
				if(WheelSliderTouchJudge(num))	
				{
					if(!TSWheelSlider_TouchConfirmTimer[num])
					{
						WheelSliderState[num] = WHEEL_SLIDER_TOUCH;	
					}	
				}
				else
				{
					WheelSliderTouchFlag[num] = 0;
					for(i = TS_BaseCh; i < TS_BaseCh + SLIDER_CH_COUNT[num]; i++)
					{
						TS_AreaConfirmTimerSet(i,AREA_PNOISE);	
					}
				}
			}				
		}
		else if(WheelSliderState[num] == WHEEL_SLIDER_TOUCH)
		{		
			if(WheelSliderTouchFlag[num])
			{
				if(!WheelSliderTouchJudge(num))	
				{
					WheelSliderTouchFlag[num] = 0;
					TSWheelSlider_TouchConfirmTimer[num] = WHEEL_SLIDER_TOUCH_RELEASE_CONFIRM_TIME;		
				}
			}
			else						 
			{
				if(!WheelSliderTouchJudge(num))	
				{
					if(!TSWheelSlider_TouchConfirmTimer[num])
					{
						WheelSliderState[num] = WHEEL_SLIDER_NO_TOUCH;	
						WheelSliderPosition[num] = -1;
						for(i = TS_BaseCh; i < TS_BaseCh + SLIDER_CH_COUNT[num]; i++)
						{
							TS_AreaConfirmTimerSet(i,AREA_PNOISE);	
						}
					}
				}
				else
				{
					WheelSliderTouchFlag[num] = 1;				
				}
			}		
		}		

		if(WheelSliderState[num] == WHEEL_SLIDER_TOUCH)
		{
			if(WheelSliderValidTouchFlag)
			{
				WheelSliderPosition[num] = WheelSliderPositionTemp;		

				Uart0_PutChar(num + 0x30);	
				Uart0_PutChar(' ');
				
				Uart0_PutChar(WheelSliderPosition[num]/100+0x30);		
				Uart0_PutChar((WheelSliderPosition[num]%100)/10+0x30);		
				Uart0_PutChar((WheelSliderPosition[num]%10)+0x30);	

				Uart0_PutChar('\r');	
				Uart0_PutChar('\n');	

			}
		}
#if (SUPPORT_STOP_MODE_AUTO_SCAN || SUPPORT_STOP_MODE_MANUAL_SCAN)
		if(WheelSliderTouchFlag[num])
		{
			EnterStopScanTimer = ENTER_STOP_WAKEUP_TIME;
		}
#endif
		TS_BaseCh += SLIDER_CH_COUNT[num];
	}
}
#endif

void TS_RawDataCalibrate(unsigned int data1, unsigned int data2)
{
	unsigned char i;

	for(i = 0; i < OPENED_TS_COUNT; i++)
	{
		TS_RawData[i] = ((unsigned long int)TS_RawData[i]*(unsigned long int)data2)/data1;			
	}	
}
void TS_CheckRefCh(void)
{
	unsigned int  TS_PostData;
	int  Delta;

	TS_RefChFilterBuf -= TS_RefChFilterBuf/FILTER_COUNT;
	TS_RefChFilterBuf += TS_RefChRawData;
	TS_PostData 	= TS_RefChFilterBuf/FILTER_COUNT;	
// 	Uart0_PutChar(0xee);	
// Uart0_PutChar(sizeof(TSWheel_BaseLineData));

// 				Uart0_PutChar(TS_RefCHRefBaseLine>>8);
// 		Uart0_PutChar(TS_RefCHRefBaseLine);		

	if(!RefChUnstable)
	{
		Delta = (int)TS_PostData - (int)TS_RefChBaseLineData;			  
	
		if((Delta > REF_CH_BASE_CHANGE_THD) || (Delta < -REF_CH_BASE_CHANGE_THD))
		{
			RefChUnstable = 1;
			TS_RefCHCmpData = TS_PostData;
			TS_RefCHBaseConfirmTimer = REF_CH_BASE_CONFIRM_TIME;				
		}

		if(!TS_RefCHRefBaseLineAdjuTimer)
		{
			TS_RefCHRefBaseLineAdjuTimer = 2;
			Delta = (int)TS_RefChBaseLineData - (int)TS_RefCHRefBaseLine;

			if(Delta > 0)
			{
				TS_RefCHRefBaseLine++;	
			}
			else if(Delta < 0)
			{
				TS_RefCHRefBaseLine -= 2;	
			}				
		}			

		Delta = (int)TS_PostData - (int)TS_RefCHRefBaseLine;
		if((Delta > REF_CH_BASE_CHANGE_THD) || (Delta < -REF_CH_BASE_CHANGE_THD))
		{
			PhoneInterfFlag = 1;			
		}
		else
		{
			PhoneInterfFlag = 0;	
		}				
	}
	else 
	{
		Delta = (int)TS_PostData - (int)TS_RefCHCmpData;			  
	
		if((Delta > REF_CH_BASE_PERMITTED_DEVIATION) || (Delta < -REF_CH_BASE_PERMITTED_DEVIATION))
		{
			TS_RefCHCmpData = TS_PostData;
			TS_RefCHBaseConfirmTimer = REF_CH_BASE_CONFIRM_TIME;						
		}
		else
		{
			if(!TS_RefCHBaseConfirmTimer)
			{
				RefChUnstable = 0;
				TS_RefChBaseLineData = TS_PostData;	
			}
		}			
	}

// 	TS_RawDataCalibrate(TS_PostData,TS_RefCHRefBaseLine);
}
/*********************************************************************************************************************/
#endif
