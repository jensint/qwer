C51 COMPILER V9.51   LCD_DISPLAY                                                           09/11/2017 15:59:23 PAGE 1   


C51 COMPILER V9.51, COMPILATION OF MODULE LCD_DISPLAY
OBJECT MODULE PLACED IN .\hex\lcd_display.obj
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE lcd_display.c ROM(COMPACT) BROWSE DEBUG OBJECTEXTEND PRINT(.\lst\lcd_displa
                    -y.lst) TABS(2) OBJECT(.\hex\lcd_display.obj)

line level    source

   1          #ifndef _LCD_DISPLAY_C_
   2          #define _LCD_DISPLAY_C_
   3          
   4          /*********************************************************************************************************
             -************/
   5          #include "ca51f_config.h"
   6          #if (IC_TYPE == IC_TYPE_CA51F2X)
   7          #include "../../includes/ca51f2sfr.h"
   8          #include "../../includes/ca51f2xsfr.h"
   9          #include "../../includes/gpiodef_f2.h"
  10          #elif (IC_TYPE == IC_TYPE_CA51F3X)
              #include "../../includes/ca51f3sfr.h"
              #include "../../includes/ca51f3xsfr.h"
              #include "../../includes/gpiodef_f3.h"
              #endif
  15          #include "../../includes/system.h"
  16          #include "../../Library/includes/uart.h"
  17          #include "../../Library/includes/delay.h"
  18          #include "../../Library/includes/system_clock.h"
  19          #include "../../Library/includes/lcd_led.h"
  20          #include "lcd_display.h"
  21          #include <intrins.h>
  22          /*********************************************************************************************************
             -************/
  23          code unsigned char NUM_TAB[]=
  24          {
  25            0x5F,   // 0
  26            0x06,   // 1
  27            0x3D,   // 2
  28            0x2F,   // 3
  29            0x66,   // 4
  30            0x6B,   // 5
  31            0x7B,   // 6
  32            0x0E,   // 7
  33            0x7F,   // 8
  34            0x6F,   // 9
  35            0x7E,   // A
  36            0x73,   // B
  37            0x59,   // C
  38            0x37,   // D
  39            0x79,   // E
  40            0x78    // F
  41          };
  42          void LCD_ShowChar(unsigned char laddr,unsigned char lnum)
  43          {
  44   1        unsigned char temp1,temp2,temp3;
  45   1        if((laddr > LOCATION_MAX)||(lnum > NUM_MAX)) return;
  46   1        if(laddr == 0)
  47   1        {
  48   2          temp3 = LCD_LED_ReadLram(5);
  49   2          temp3 = temp3&0x01;
  50   2      
  51   2          if(lnum > 2) lnum = 2;
  52   2      
C51 COMPILER V9.51   LCD_DISPLAY                                                           09/11/2017 15:59:23 PAGE 2   

  53   2          if(lnum == 1) 
  54   2          {
  55   3            temp3 |= 0x06;    
  56   3          }
  57   2          else if(lnum == 2)
  58   2          {
  59   3            temp3 |= 0x0c;    
  60   3          }  
  61   2          LCD_LED_WriteLram(5,temp3); 
  62   2          return;
  63   2        }
  64   1        else if(laddr == 1)
  65   1        {
  66   2          temp1 = 6;
  67   2        }
  68   1        else if(laddr == 2)
  69   1        {
  70   2          temp1 = 8;
  71   2        }
  72   1        else if(laddr == 3)
  73   1        {
  74   2          temp1 = 2;
  75   2        }
  76   1        temp2 = NUM_TAB[lnum];
  77   1      
  78   1        temp3 = LCD_LED_ReadLram(temp1);
  79   1        temp3 = (temp3&0x08)|(temp2>>4);
  80   1        LCD_LED_WriteLram(temp1,temp3); 
  81   1        if(laddr == 1)
  82   1        {
  83   2          temp1++;
  84   2        }
  85   1        else if(laddr == 2)
  86   1        {
  87   2          temp1 = 3;
  88   2        }
  89   1        else if(laddr == 3)
  90   1        {
  91   2          temp1 = 1;
  92   2        }
  93   1        LCD_LED_WriteLram(temp1,temp2&0x0F);  
  94   1      }
  95          void LCD_RamClear(void)
  96          {
  97   1        unsigned char i;
  98   1        for(i = 0; i < LCD_RAM_SIZE; i++)
  99   1        {
 100   2          LCD_LED_WriteLram(i,0x00);
 101   2        }
 102   1      }
 103          void LCD_Display_MainLoop(void)
 104          {
 105   1      #if (IC_TYPE == IC_TYPE_CA51F3X)
                GPIO_Init(P00F,P00_COM0_SETTING);
                GPIO_Init(P01F,P01_COM1_SETTING);
                GPIO_Init(P02F,P02_COM2_SETTING);
                GPIO_Init(P03F,P03_COM3_SETTING);  
              //  GPIO_Init(P04F,P04_COM4_SETTING);
              
                GPIO_Init(P17F,P17_SEG0_SETTING);
                GPIO_Init(P37F,P37_SEG1_SETTING); 
                GPIO_Init(P36F,P36_SEG2_SETTING);  
C51 COMPILER V9.51   LCD_DISPLAY                                                           09/11/2017 15:59:23 PAGE 3   

                GPIO_Init(P35F,P35_SEG3_SETTING); 
                GPIO_Init(P34F,P34_SEG4_SETTING);
                GPIO_Init(P07F,P07_SEG5_SETTING);
                GPIO_Init(P06F,P06_SEG6_SETTING); 
                GPIO_Init(P05F,P05_SEG7_SETTING);
                GPIO_Init(P04F,P04_SEG8_SETTING);
              //  GPIO_Init(P03F,P03_SEG9_SETTING);
              #elif  (IC_TYPE == IC_TYPE_CA51F2X)
 123   1        GPIO_Init(P00F,P00_COM0_SETTING);
 124   1        GPIO_Init(P01F,P01_COM1_SETTING);
 125   1        GPIO_Init(P02F,P02_COM2_SETTING);
 126   1        GPIO_Init(P03F,P03_COM3_SETTING);
 127   1      //  GPIO_Init(P04F,P04_COM4_SETTING);
 128   1      //  GPIO_Init(P05F,P05_COM5_SETTING);
 129   1      //  GPIO_Init(P06F,P06_COM6_SETTING);
 130   1      //  GPIO_Init(P07F,P07_COM7_SETTING);
 131   1      
 132   1        GPIO_Init(P57F,P57_SEG0_SETTING);   
 133   1        GPIO_Init(P34F,P34_SEG1_SETTING); 
 134   1        GPIO_Init(P35F,P35_SEG2_SETTING);  
 135   1        GPIO_Init(P56F,P56_SEG3_SETTING);
 136   1        GPIO_Init(P50F,P50_SEG4_SETTING); 
 137   1        GPIO_Init(P51F,P51_SEG5_SETTING);
 138   1        GPIO_Init(P52F,P52_SEG6_SETTING);
 139   1        GPIO_Init(P53F,P53_SEG7_SETTING);
 140   1        GPIO_Init(P54F,P54_SEG8_SETTING);  
 141   1      //  GPIO_Init(P55F,P55_SEG9_SETTING);
 142   1      
 143   1      //  GPIO_Init(P60F,P60_SEG10_SETTING);
 144   1      //  GPIO_Init(P61F,P61_SEG11_SETTING);
 145   1      //  GPIO_Init(P62F,P62_SEG12_SETTING);
 146   1      //  GPIO_Init(P63F,P63_SEG13_SETTING);
 147   1      //  GPIO_Init(P64F,P64_SEG14_SETTING);    
 148   1      //  GPIO_Init(P65F,P65_SEG15_SETTING);  
 149   1      //  GPIO_Init(P10F,P10_SEG16_SETTING);
 150   1      //  GPIO_Init(P11F,P11_SEG17_SETTING);
 151   1      //  GPIO_Init(P12F,P12_SEG18_SETTING);
 152   1      //  GPIO_Init(P13F,P13_SEG19_SETTING);
 153   1      
 154   1      //  GPIO_Init(P14F,P14_SEG20_SETTING);
 155   1      //  GPIO_Init(P15F,P15_SEG21_SETTING);
 156   1      //  GPIO_Init(P16F,P16_SEG22_SETTING);
 157   1      //  GPIO_Init(P17F,P17_SEG23_SETTING);
 158   1      //  GPIO_Init(P27F,P27_SEG24_SETTING);
 159   1      //  GPIO_Init(P26F,P26_SEG25_SETTING);
 160   1      //  GPIO_Init(P25F,P25_SEG26_SETTING);
 161   1      //  GPIO_Init(P24F,P24_SEG27_SETTING);
 162   1      //  GPIO_Init(P23F,P23_SEG28_SETTING);
 163   1      //  GPIO_Init(P22F,P22_SEG29_SETTING);
 164   1      
 165   1      //  GPIO_Init(P21F,P21_SEG30_SETTING);
 166   1      //  GPIO_Init(P20F,P20_SEG31_SETTING);
 167   1      //  GPIO_Init(P07F,P07_LCD_SEG32_SETTING);
 168   1      //  GPIO_Init(P06F,P06_LCD_SEG33_SETTING);
 169   1      //  GPIO_Init(P05F,P05_LCD_SEG34_SETTING);
 170   1      //  GPIO_Init(P04F,P04_LCD_SEG35_SETTING); 
 171   1      #endif
 172   1      
 173   1        LCD_RamClear();
 174   1      
 175   1      #if (LCD_CLK_SOURCE == IRCH)
 176   1        LCD_init(LEN_IRCH,DMOD_5ua,BIAS_1_3,LDRV_7,112);
C51 COMPILER V9.51   LCD_DISPLAY                                                           09/11/2017 15:59:23 PAGE 4   

 177   1      #elif (LCD_CLK_SOURCE == XOSCL)
                CKCON |= XLCKE;
                while(!(CKCON & XLSTA));
                LCD_init(LEN_XOSCL,DMOD_5ua,BIAS_1_3,LDRV_7,0);
              #elif (LCD_CLK_SOURCE == IRCL)
                CKCON |= ILCKE;
                LCD_init(LEN_IRCL,DMOD_5ua,BIAS_1_3,LDRV_7,0);
              #endif
 185   1        LCD_ShowChar(0,1);
 186   1        LCD_ShowChar(1,2);
 187   1        LCD_ShowChar(2,3);
 188   1        LCD_ShowChar(3,4);
 189   1        while(1)
 190   1        {
 191   2        }
 192   1      }
 193          #endif


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    294    ----
   CONSTANT SIZE    =     16    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----       6
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
